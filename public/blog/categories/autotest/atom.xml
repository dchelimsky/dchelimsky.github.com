<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Autotest | David Chelimsky]]></title>
  <link href="http://blog.davidchelimsky.net/blog/categories/autotest/atom.xml" rel="self"/>
  <link href="http://blog.davidchelimsky.net/"/>
  <updated>2013-08-18T17:09:18+02:00</updated>
  <id>http://blog.davidchelimsky.net/</id>
  <author>
    <name><![CDATA[David]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[rspec-2.5.0 is released!]]></title>
    <link href="http://blog.davidchelimsky.net/blog/2011/02/06/rspec-250-is-released/"/>
    <updated>2011-02-06T17:08:41+01:00</updated>
    <id>http://blog.davidchelimsky.net/blog/2011/02/06/rspec-250-is-released</id>
    <content type="html"><![CDATA[<p>rspec-2.5 is a minor upgrade, and is fully backward compatible with rspec-2.4. It includes several bug fixes, enhancements, and one deprecation. See the changelog below for details.</p>

<p>We had a little glitch publishing the docs to <a href="http://relishapp.com/rspec">http://relishapp.com/rspec</a>, so the 2.5 docs won&rsquo;t be up for another day or two, so I&rsquo;ll detail the noticable differences here.</p>

<h2>Autotest/Bundler integration</h2>

<p>UPDATE: the &mdash;skip-bundler option does not work, and is removed from rspec-core-2.5.1. See the <a href="http://blog.davidchelimsky.net/2011/02/06/rspec-core-251-is-released/">post on the 2.5.1 release</a> for more information.</p>

<h3>&mdash;skip-bundler</h3>

<p>RSpec&rsquo;s Autotest integration assumes that you want <code>bundle exec</code> in the shell command generated by Autotest if you have a <code>Gemfile</code>. This works fine for some situations, but not all, so we added an opt-out for rspec-2.5:</p>

<pre><code>autotest -- --skip-bundler
</code></pre>

<p>Autotest ignores everything after the initial <code>--</code>, so RSpec&rsquo;s Autotest extension handles the <code>--skip-bundler</code> option.</p>

<h3>Autotest&rsquo;s bundler plugin</h3>

<p>Autotest ships with a plugin for bundler. Just add the following to a <code>.autotest</code> file in the project&rsquo;s root directory, or your home directory:</p>

<pre><code>require 'autotest/bundler'
</code></pre>

<p>This prefixes the generated shell command with &lsquo;bundle exec&rsquo;.</p>

<p>UPDATE: The implicit detection of Gemfile is removed from rspec-core-2.5.1. See the <a href="http://blog.davidchelimsky.net/2011/02/06/rspec-core-251-is-released/">post on the 2.5.1 release</a> for more information.</p>

<h3>Implicit detection of Gemfile is deprecated</h3>

<p>Given that Autotest has its own way of dealing with Bundler (see above), we deprecated the implicit assumption that <code>Gemfile</code> means &ldquo;use bundler&rdquo;. You&rsquo;ll see a deprecation notice if you are relying on that, but it <em>still works</em>. It&rsquo;s just a deprecation warning. To silence the warning, either use the <code>--skip-bundler</code> option or Autotest&rsquo;s bundler plugin, described above.</p>

<h2>HTML Formatter</h2>

<p>The HTML formatter now has a set of checkboxes in the header that allow you to filter what you&rsquo;re looking at:</p>

<p><img src="https://img.skitch.com/20110205-xup5ktgdua75rfs8fwtr1yf1b7.jpg" alt="" /></p>

<h2>to not, or not to not</h2>

<p>Are you the sort of person for whom &ldquo;expect this block of code <em>to not</em> raise an error&rdquo; is like nails on chalkboard? If so, relief has arrived. You may now type either of the following, and RSpec will happily service you:</p>

<pre><code>expect { ... }.to_not raise_error
expect { ... }.not_to raise_error
</code></pre>

<h2>Changelog</h2>

<h3>rspec-core-2.5.0</h3>

<p><a href="http://github.com/rspec/rspec-core/compare/v2.4.0...v2.5.0">full changelog</a></p>

<ul>
<li><p>Enhancements</p>

<ul>
<li>Autotest::Rspec2 parses command line args passed to autotest after &lsquo;&mdash;&rsquo;</li>
<li>&mdash;skip-bundler option for autotest command</li>
<li>Autotest regexp fixes (Jon Rowe)</li>
<li>Add filters to html and textmate formatters (Daniel Quimper)</li>
<li>Explicit passing of block (need for JRuby 1.6) (John Firebaugh)</li>
</ul>
</li>
<li><p>Bug fixes</p>

<ul>
<li>fix dom IDs in HTML formatter (Brian Faherty)</li>
<li>fix bug with &mdash;drb + formatters when not running in drb</li>
<li>include &mdash;tag options in drb args (monocle)</li>
<li>fix regression so now SPEC_OPTS take precedence over CLI options again
(Roman Chernyatchik)</li>
<li>only call its(:attribute) once (failing example from Brian Dunn)</li>
<li>fix bizarre bug where rspec would hang after <code>String.alias :to_int :to_i</code>
(Damian Nurzynski)</li>
</ul>
</li>
<li><p>Deprecations</p>

<ul>
<li>implicit inclusion of &lsquo;bundle exec&rsquo; when Gemfile present (use autotest&rsquo;s
bundler plugin instead)</li>
</ul>
</li>
</ul>


<h3>rspec-expectations-2.5.0</h3>

<p><a href="http://github.com/rspec/rspec-expectations/compare/v2.4.0...v2.5.0">full changelog</a></p>

<ul>
<li><p>Enhancements</p>

<ul>
<li><code>should exist</code> works with <code>exist?</code> or <code>exists?</code> (Myron Marston)</li>
<li><code>expect { ... }.not_to do_something</code> (in addition to <code>to_not</code>)</li>
</ul>
</li>
<li><p>Documentation</p>

<ul>
<li>improved docs for <code>raise_error</code> matcher (James Almond)</li>
</ul>
</li>
</ul>


<h3>rspec-mocks-2.5.0</h3>

<p><a href="http://github.com/rspec/rspec-mocks/compare/v2.4.0...v2.5.0">full changelog</a></p>

<ul>
<li>Bug fixes

<ul>
<li>message expectation counts now work in combination with a stub (Damian
Nurzynski)</li>
<li>fix failure message when message received with incorrect args (Josep M.
Bach)</li>
</ul>
</li>
</ul>


<h3>rspec-rails-2.5.0</h3>

<p><a href="http://github.com/rspec/rspec-rails/compare/v2.4.1...v2.5.0">full changelog</a></p>

<ul>
<li><p>Enhancements</p>

<ul>
<li>use <code>index_helper</code> instead of <code>table_name</code> when generating specs (Reza
Primardiansyah)</li>
</ul>
</li>
<li><p>Bug fixes</p>

<ul>
<li>fixed bug in which <code>render_views</code> in a nested group set the value in its
parent group.</li>
<li>only include MailerExampleGroup when it is defiend (Steve Sloan)</li>
<li><code>mock_model.as_null_object.attribute.blank?</code> returns <code>false</code> (Randy Schmidt)</li>
<li>fix typo in request specs (Paco Guzman)</li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rspec-2 and autotest]]></title>
    <link href="http://blog.davidchelimsky.net/blog/2010/03/15/rspec-2-and-autotest/"/>
    <updated>2010-03-15T12:59:15+01:00</updated>
    <id>http://blog.davidchelimsky.net/blog/2010/03/15/rspec-2-and-autotest</id>
    <content type="html"><![CDATA[<p>[Updated on 17 March, 2010]</p>

<p>I just released rspec-2.0.0.beta.4 with support for <code>autotest</code>, among other enhancements. Autotest integration is going to be a bit different in rspec-2. We&rsquo;re removing the <code>autospec</code> command, which did nothing but set an environment variable and call <code>autotest</code>.</p>

<p>In rspec-2, you&rsquo;ll use the <code>autotest</code> command directly, but doing so requires a small bit of configuration. As of beta.4, you&rsquo;ll have to do add this configuration manually. Just create an <code>autotest</code> directory in the root of your project, put the following statement in <code>./autotest/discover.rb</code>:</p>

<pre><code>Autotest.add_discovery { "rspec2" }
</code></pre>

<p>The final 2.0.0 release will include a generator (even for non-rails projects) that will add this for you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[limiting scope of autotest]]></title>
    <link href="http://blog.davidchelimsky.net/blog/2008/03/05/limiting-scope-of-autotest/"/>
    <updated>2008-03-05T08:07:48+01:00</updated>
    <id>http://blog.davidchelimsky.net/blog/2008/03/05/limiting-scope-of-autotest</id>
    <content type="html"><![CDATA[<p>If you use <a href="http://zentest.rubyforge.org/ZenTest/classes/Autotest.html">autotest</a> with <a href="http://rspec.info">rspec</a> or test/unit, you&rsquo;ve probably had this experience (or one like it):</p>

<p>You want to add some new behaviour to a model object, so you write a spec, watch it fail, make it pass, and then wait until the entire spec suite runs. Even if you&rsquo;ve got a fast-running suite, this can be painful sometimes.</p>

<p>Wouldn&rsquo;t it be great if you could limit the scope of what directories autotest observes?  Well it turns out that you can! Recent releases of ZenTest include a find_directories attribute on the autotest object. Just add this to your .autotest file:</p>

<pre><code>Autotest.add_hook :initialize do |at|
unless ARGV.empty?
  at.find_directories = ARGV.dup
end
end
</code></pre>

<p>and then you can say:</p>

<pre><code>autotest app/models spec/models
</code></pre>

<p>and it will only observe those directories. This is nice and flexible, but I find that most of the time I&rsquo;m wanting pairs like that: app/models and spec/models, or app/views/accounts and spec/views/accounts. In that case, I&rsquo;d really like to just say:</p>

<pre><code>autotest models
</code></pre>

<p>To accomplish that you can do this to the hook instead:</p>

<pre><code>Autotest.add_hook :initialize do |at|
unless ARGV.empty?
  at.find_directories = ["spec/#{ARGV.first}","app/#{ARGV.first}"]
end
end
</code></pre>

<p>Want the best of both worlds? Try this:</p>

<pre><code>Autotest.add_hook :initialize do |at|
unless ARGV.empty?
  at.find_directories = ARGV.length == 1 ? ["spec/#{ARGV.first}","app/#{ARGV.first}"] : ARGV.dup
end
end
</code></pre>

<p>The only limitation of this is that it&rsquo;s based on directories, not files. Once in a while, when I&rsquo;m bootstrapping a new object, I&rsquo;ll keep the examples and the implementation in the same file until I&rsquo;ve got things fleshed out a bit the object is ready to play nice with others. In that case, I might like to just point autotest to that one file. I started working on a patch for this for ZenTest, but I&rsquo;m not sure it&rsquo;s worth the extra effort. What do you think?</p>

<p>Regardless &ndash; happy auto-exemplifying!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RSpec-1.1.2 and ZenTest-3.8.0]]></title>
    <link href="http://blog.davidchelimsky.net/blog/2008/01/15/rspec-1-1-2-and-zentest-3-8-0/"/>
    <updated>2008-01-15T07:15:55+01:00</updated>
    <id>http://blog.davidchelimsky.net/blog/2008/01/15/rspec-1-1-2-and-zentest-3-8-0</id>
    <content type="html"><![CDATA[<p>The <a href="http://rspec.info">RSpec-1.1.2</a> release includes changes to keep RSpec compatible with autotest in <a href="http://zentest.rubyforge.org/ZenTest/">ZenTest-3.8.0</a>. This new ZenTest release boasts an improved cascading configuration model that works well for subclasses (like those that ship with RSpec) <strong>and</strong> allows users to override the mappings of specs (or tests) to code as well as the list of files that get ignored by autotest.</p>

<p>To support this, Autotest now loads the following files in the following order:</p>

<pre><code>Autotest
AutotestSubClass
~/.autotest
./.autotest
</code></pre>

<p>This allows RSpec (or any other library) to override defaults set in <code>Autotest</code>, and then provides users both generic (~/.autotest) and project specific (./.autotest) control over the mappings and exceptions.</p>

<p>How can you take advantage of this?</p>

<p>When autotest begins to run, it calls its <code>:initialize</code> hook. This hook is exposed by the <code>add_hook</code> method. You can use this to access the mappings and exceptions using the following methods on Autotest:</p>

<pre><code>clear_mappings()
add_mapping(regexp, proc)
remove_mapping(regexp)

clear_exceptions()
add_exception(string)
remove_exception(string)
</code></pre>

<h4>add_mapping</h4>

<p>The <code>add_mapping</code> method adds a key/value pair to a hash that maps regexps to procs. Whenever autotest senses that a file is touched, it looks for the regexp that matches the file name and the runs all the files returned by the associated proc.</p>

<p>Imagine you&rsquo;re working on a shopping cart app. You have some currency conversion behaviour in a <code>Product</code> model that you&rsquo;d like to extract to an <code>acts_as_currency</code> plugin, and you want autotest to observe the process. You might add a mapping like this to .autotest:</p>

<pre><code>Autotest.add_hook :initialize do |at|
at.add_mapping(%r%^plugins/acts_as_currency/lib/.*\.rb$%) {
  at.files_matching %r%^spec/models/product_spec\.rb$% +
  at.files_matching %r%^plugins/acts_as_currency/spec/.*_spec\.rb$%
}
end
</code></pre>

<p>In this case, a change to any of the files in the plugin&rsquo;s lib directory would cause all the plugins specs to run, as well as the spec for the <code>Product</code> model.</p>

<h4>add_exception</h4>

<p>The <code>add_exception</code> method adds paths to a list of paths that Autotest ignores.</p>

<p>I like to run autotest in verbose mode (<code>autotest -v</code>) because it tells me when I change a file that it doesn&rsquo;t know what to do with. The drawback is that it wants to tell me every time I commit because files in the .svn/.hg/.git directories change. So I&rsquo;ve got these all listed as exceptions in my ~/.autotest file, along with assorted others:</p>

<pre><code>Autotest.add_hook :initialize do |at|
%w{.svn .hg .git}.each {|exception|at.add_exception(exception)}
end
</code></pre>

<p>Note that autotest compiles this list to a Regexp with no anchors, so .hgignore and .gitignore would also get ignored in this case.</p>

<h4>Cascading config and granular control</h4>

<p>One of the coolest changes in ZenTest-3.8.0 is that autotest loads both ~/.autotest and ./.autotest. So now you can have the hooks you like on every project (like growl notifation) all in one place and still have project specific settings.</p>

<p>This also allows you to set up global mappings/exceptions and modify them at the project level. See <a href="http://zentest.rubyforge.org/ZenTest/classes/Autotest.html">Autotest&rsquo;s RDoc</a> for more info.</p>
]]></content>
  </entry>
  
</feed>
